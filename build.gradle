plugins {
  id 'org.springframework.boot' version '2.7.7'
  id 'com.gorylenko.gradle-git-properties' version '2.4.1'
  id 'com.palantir.git-version' version '0.15.0'
  id 'checkstyle'
  id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'

group 'pro.hirooka'
version version

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

repositories {
  mavenCentral()
}

dependencies {
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.springframework.boot:spring-boot-starter-security'
  implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
  implementation 'org.springframework.boot:spring-boot-starter-validation'
  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
  implementation 'org.springframework.boot:spring-boot-devtools'
  testImplementation 'org.springframework.boot:spring-boot-starter-test'

  implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.1'
  implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

  // RDBMS
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.5.1'
  implementation group: 'org.hsqldb', name: 'hsqldb', version: '2.7.1'
  implementation group: 'mysql', name: 'mysql-connector-java', version: '8.0.31'
  //implementation group: 'org.flywaydb', name: 'flyway-core', version: '8.5.10'

  // Unix Domain Socket
  implementation group: 'com.kohlschutter.junixsocket', name: 'junixsocket-common', version: '2.4.0'
  implementation group: 'com.kohlschutter.junixsocket', name: 'junixsocket-native-common', version: '2.6.2'

  // OpenAPI
  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.14'

  // Micrometer Registry Prometheus
  implementation group: 'io.micrometer', name: 'micrometer-registry-prometheus', version: '1.10.2'

  // Lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
}

bootJar {
  launchScript()
}

bootRun {
  if (project.hasProperty('jvmArgs')) {
    jvmArgs = (project.jvmArgs.split("\\s+") as List)
  }
}

test {
  useJUnitPlatform()
  finalizedBy jacocoTestReport
  if (project.hasProperty("jvmArgs")) {
    jvmArgs = (project.jvmArgs.split("\\s+") as List)
  }
}

configurations.all {
  resolutionStrategy {
    cacheChangingModulesFor 0, 'seconds'
    cacheDynamicVersionsFor 0, 'seconds'
  }
}

checkstyle {
  toolVersion '10.2'
  configFile = file('config/checkstyle/checkstyle.xml')
}

springBoot {
  buildInfo()
}

task showVersion {
  doFirst {
    println "${version}"
  }
}

List jacocoExcludes = [
        'example/domain/dto/*',
        'example/Application.class'
]

jacocoTestReport {
  dependsOn test
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, excludes: jacocoExcludes)
    }))
  }
  finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
  afterEvaluate {
    classDirectories.setFrom(files(classDirectories.files.collect {
      fileTree(dir: it, excludes: jacocoExcludes)
    }))
  }
  violationRules {
    rule {
      enabled = false
      limit {
        minimum = 0.6
        // https://testing.googleblog.com/2020/08/code-coverage-best-practices.html
        // https://testing.googleblog.com/2014/07/measuring-coverage-at-google.html
      }
    }
  }
}
